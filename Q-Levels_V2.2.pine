
//@version=5
indicator("Q-Levels",overlay=true)
import PineCoders/VisibleChart/4

//Example input next line
//$NVDA: Put Support & Put Support 0DTE, 457.5, 1D Exp Move Min, 457, HVL, 457.25, HVL 0DTE, 456.75, Call Resistance 0DTE & Gamma Wall 0DTE & GEX Level 0, 392, GEX Level 1, 400, 1D Exp Move Max, 397, Call Resistance, 384  $AAPL: Put Support & Put Support 0DTE, 190, 1D Exp Move Min, 195, HVL, 186, HVL 0DTE, 188, Call Resistance 0DTE & Gamma Wall 0DTE & GEX Level 0, 192, GEX Level 1, 200, 1D Exp Move Max, 197, Call Resistance, 184

//General inputs
txt = input.string("",title="Paste here the Txt File",confirm=true,tooltip = "To learn how to use the Q-Levels indicator you can find more info at: https://www.menthorq.co/tradingview \nYou can add levels for multiple tickers. Tickers should be separated by the '$' Sign and this is the format for the levels:\n$AAPL: Level, 100, Level 2, 200...\n$NVDA: Level, 450, Level 2, 500...\n$SPX: Level, 4500, Level 2, 4600...")
timeout = input.int(30,title="Timeout to reactivate fired alerts")
offset = input.int(50,title="Label Offset")

max_lenght = input.int(defval=50,title="Number of characters per line", group= 'Table options')
table_sorting = input.string('Alphabetical levels name', title ='Table Sorting', options=['Alphabetical levels name', 'Ascending levels values','Descending levels values'], group= 'Table options')


//Colors
Randomcolor= false
color0=input.color(defval=color.white,title="Color of the first line and text",group="Lines Inputs")
alert0=input.bool(defval=false,title="Alert when first line gets hit",group="Lines Inputs")
color1=input.color(defval=color.red,title="Color of the second line and text",group="Lines Inputs")
alert1=input.bool(defval=false,title="Alert when second line gets hit",group="Lines Inputs")
color2=input.color(defval=color.green,title="Color of the third line and text",group="Lines Inputs")
alert2=input.bool(defval=false,title="Alert when third line gets hit",group="Lines Inputs")
color3=input.color(defval=color.blue,title="Color of the fourth line and text",group="Lines Inputs")
alert3=input.bool(defval=false,title="Alert when fourth line gets hit",group="Lines Inputs")
color4=input.color(defval=color.lime,title="Color of the fifth line and text",group="Lines Inputs")
alert4=input.bool(defval=false,title="Alert when fifth line gets hit",group="Lines Inputs")
color5=input.color(defval=color.orange,title="Color of the sixth line and text",group="Lines Inputs")
alert5=input.bool(defval=false,title="Alert when sixth line gets hit",group="Lines Inputs")
color6=input.color(defval=color.silver,title="Color of the seventh line and text",group="Lines Inputs")
alert6=input.bool(defval=false,title="Alert when seventh line gets hit",group="Lines Inputs")
color7=input.color(defval=color.white,title="Color of the eighth line and text",group="Lines Inputs")
alert7=input.bool(defval=false,title="Alert when eighth line gets hit",group="Lines Inputs")
color8=input.color(defval=color.yellow,title="Color of the ninth line and text",group="Lines Inputs")
alert8=input.bool(defval=false,title="Alert when ninth line gets hit",group="Lines Inputs")
color9=input.color(defval=color.fuchsia,title="Color of the tenth line and text",group="Lines Inputs")
alert9=input.bool(defval=false,title="Alert when tenth line gets hit",group="Lines Inputs")

TxtToArray(string origin,string divider) =>
    Arr = array.new_string()
    Arr:= str.split(origin,divider)
    Arr

DividedTickers=TxtToArray(txt,"$")

tickers = array.new_string()
data = array.new_string()

string exported = ""

for i=0 to array.size(DividedTickers)-1
    arr=str.split(array.get(DividedTickers,i),": ")
    array.push(tickers,array.get(arr,0))
    array.push(data,array.get(arr,1))

for i=0 to array.size(tickers)-1
    if syminfo.ticker==str.upper(array.get(tickers,i))
        exported:=array.get(data,i)

Dividedstrings=TxtToArray(exported,", ")

varip levels= array.new_string()
varip done= false
if barstate.isrealtime and not done
    if alert0
        array.push(levels,array.get(Dividedstrings,1))
    if alert1
        array.push(levels,array.get(Dividedstrings,3))
    if alert2
        array.push(levels,array.get(Dividedstrings,5))
    if alert3
        array.push(levels,array.get(Dividedstrings,7))
    if alert4
        array.push(levels,array.get(Dividedstrings,9))
    if alert5
        array.push(levels,array.get(Dividedstrings,11))
    if alert6
        array.push(levels,array.get(Dividedstrings,13))
    if alert7
        array.push(levels,array.get(Dividedstrings,15))
    if alert8
        array.push(levels,array.get(Dividedstrings,17))
    if alert9
        array.push(levels,array.get(Dividedstrings,19))
    done:=true


color temporarycolor=na
plot(array.size(Dividedstrings)>=2 ? str.tonumber(array.get(Dividedstrings,1)) : na,title="first line",color=Randomcolor ? color.rgb(math.random(0,255),math.random(0,255),math.random(0,255)):color0,display=display.price_scale)
plot(array.size(Dividedstrings)>=4 ? str.tonumber(array.get(Dividedstrings,3)) : na,title="second line",color=Randomcolor ? color.rgb(math.random(0,255),math.random(0,255),math.random(0,255)):color1,display=display.price_scale)
plot(array.size(Dividedstrings)>=6 ? str.tonumber(array.get(Dividedstrings,5)) : na,title="third line",color=Randomcolor ? color.rgb(math.random(0,255),math.random(0,255),math.random(0,255)):color2,display=display.price_scale)
plot(array.size(Dividedstrings)>=8 ? str.tonumber(array.get(Dividedstrings,7)) : na,title="fourth line",color=Randomcolor ? color.rgb(math.random(0,255),math.random(0,255),math.random(0,255)):color3,display=display.price_scale)
plot(array.size(Dividedstrings)>=10 ? str.tonumber(array.get(Dividedstrings,9)) : na,title="fifth line",color=Randomcolor ? color.rgb(math.random(0,255),math.random(0,255),math.random(0,255)):color4,display=display.price_scale)
plot(array.size(Dividedstrings)>=12 ? str.tonumber(array.get(Dividedstrings,11)) : na,title="sixth line",color=Randomcolor ? color.rgb(math.random(0,255),math.random(0,255),math.random(0,255)):color5,display=display.price_scale)
plot(array.size(Dividedstrings)>=14 ? str.tonumber(array.get(Dividedstrings,13)) : na,title="seventh line",color=Randomcolor ? color.rgb(math.random(0,255),math.random(0,255),math.random(0,255)):color6,display=display.price_scale)
plot(array.size(Dividedstrings)>=16 ? str.tonumber(array.get(Dividedstrings,15)) : na,title="eighth line",color=Randomcolor ? color.rgb(math.random(0,255),math.random(0,255),math.random(0,255)):color7,display=display.price_scale)
plot(array.size(Dividedstrings)>=18 ? str.tonumber(array.get(Dividedstrings,17)) : na,title="ninth line",color=Randomcolor ? color.rgb(math.random(0,255),math.random(0,255),math.random(0,255)):color8,display=display.price_scale)
plot(array.size(Dividedstrings)>=20 ? str.tonumber(array.get(Dividedstrings,19)) : na,title="tenth line",color=Randomcolor ? color.rgb(math.random(0,255),math.random(0,255),math.random(0,255)):color9,display=display.price_scale)

nb_bars = ta.barssince(time == chart.right_visible_bar_time)



if barstate.islastconfirmedhistory and array.size(Dividedstrings)!=0 
    for i=0 to array.size(Dividedstrings)-1
        
        if i%2==0
            temporarycolor:=color.rgb(math.random(0,255),math.random(0,255),math.random(0,255))
        if Randomcolor==false
            if i%20==0 or i%20==1 
                temporarycolor:=color0
            if i%20==2 or i%20==3
                temporarycolor:=color1
            if i%20==4 or i%20==5
                temporarycolor:=color2
            if i%20==6 or i%20==7
                temporarycolor:=color3
            if i%20==8 or i%20==9
                temporarycolor:=color4
            if i%20==10 or i%20==11
                temporarycolor:=color5
            if i%20==12 or i%20==13
                temporarycolor:=color6
            if i%20==14 or i%20==15
                temporarycolor:=color7
            if i%20==16 or i%20==17
                temporarycolor:=color8
            if i%20==18 or i%20==19
                temporarycolor:=color9
            
        if i%2==0
            label.new(bar_index+offset,str.tonumber(array.get(Dividedstrings,i+1)),array.get(Dividedstrings,i),xloc=xloc.bar_index,color=color.new(color.white,10),size=size.large,
             style=label.style_none,textcolor=temporarycolor,textalign=text.align_right)
        if i%2!=0
            line.new(bar_index,str.tonumber(array.get(Dividedstrings,i)),bar_index+1,str.tonumber(array.get(Dividedstrings,i)),
             extend=extend.both,color=temporarycolor)



//Alerts
varip firedlevels=array.new_string()
varip timeoutarr=array.new_int()
close0=close
close1=close[1]
if array.size(levels)!=0
    for i=0 to array.size(levels)-1
        level=str.tonumber(array.get(levels,i))
        if (close>=level and close1<=level) or (close<=level and close1>=level)
            array.push(firedlevels,str.tostring(level))
            array.push(timeoutarr,timenow+timeout*60*1000)
            array.remove(levels,i)
            alert("The level at "+str.tostring(level)+" just got hit",freq = alert.freq_all)
        if i>=array.size(levels)-1
            break
        

if array.size(timeoutarr)!=0
    for i=0 to array.size(timeoutarr)-1
        if timenow>array.get(timeoutarr,i)
            //label.new(bar_index,close,text="done")
            array.push(levels,array.get(firedlevels,i))
            array.remove(firedlevels,i)
            array.remove(timeoutarr,i)
            break
//plot(nb_bars,display =display.status_line )

//Table
varip names=array.new_string()
var done1=false
varip key_values=array.new_float()
stri="lol"
a=stri[1]
for i=0 to array.size(Dividedstrings)-1
    if i%2==0 and done1==false
        if str.length(array.get(Dividedstrings,i))>max_lenght
            string my_string=""
            for j=0 to int(str.length(array.get(Dividedstrings,i))/max_lenght)
                my_string:=my_string+str.substring(array.get(Dividedstrings,i),j*max_lenght,(j+1)*max_lenght)+"\n"

            array.push(names,my_string)
        else
            array.push(names,array.get(Dividedstrings,i))
        
    if i%2==1 and done1==false
        array.push(key_values,str.tonumber(array.get(Dividedstrings,i)))

done1:=true

max_value=0.0
for i=0 to array.size(key_values)-1
    if math.abs((array.get(key_values,i)-close))/close*100>max_value
        max_value:=math.abs((array.get(key_values,i)-close))/close*100

names_sorted=array.sort_indices(names,order=order.ascending)
key_values_sorted=array.sort_indices(key_values,order=order.ascending)
key_values_sorted2=array.sort_indices(key_values,order=order.descending)



tableOrientation = input.string('Vertical', title ='Table Orientation', options=['Horizontal', 'Vertical'], group= 'Table options')


posInput = input.string(title='Position', defval='Bottom Left', options=['Bottom Left', 'Bottom Right', 'Top Left', 'Top Right', 'Top Center', 'Bottom Center', 'Middle Right', 'Middle Left'], tooltip='Select where you want the table to be on your chart.', group= 'Table options')  

var pos = posInput == 'Bottom Left' ? position.bottom_left : posInput == 'Bottom Right' ? position.bottom_right : posInput == 'Top Left' ? position.top_left : posInput == 'Top Right' ? position.top_right : posInput == 'Top Center' ? position.top_center : posInput == 'Bottom Center' ? position.bottom_center : posInput == 'Middle Right' ? position.middle_right : posInput == 'Middle Left' ? position.middle_left : na


txtSizeInput = input.string(title='Table Text Size', defval='None', options=['Tiny', 'Small', 'Normal', 'Large', 'Huge', 'None'], tooltip='Select the size of the text. It affects the size of the whole table.', group= 'Table options')
var txtSize = txtSizeInput == 'Tiny' ? size.tiny : txtSizeInput == 'Small' ? size.small : txtSizeInput == 'Normal' ? size.normal : txtSizeInput == 'Large' ? size.large : txtSizeInput == 'Huge' ? size.huge : na


// Initiate the table variable and call upon the Position var, then identify the layout col/row numbers, color, frame etc.
if table_sorting=="Alphabetical levels name" 
    if txtSizeInput != "None"
        var table gammaTable = table.new(pos, columns=array.size(Dividedstrings), rows=array.size(Dividedstrings), frame_color=#FFFFFF, frame_width=1, border_width=1, border_color=#FFFFFF)

        // Start table cells Vertical view 
        // symbols
        if tableOrientation == 'Vertical'
            table.cell(table_id=gammaTable, column=0,  row=0, text='Key Level', bgcolor=#7122FF, text_size=txtSize, text_color=color.white,text_halign=text.align_left)
            table.cell(table_id=gammaTable, column=1,  row=0, text='Value', bgcolor=#7122FF, text_size=txtSize, text_color=color.white)
            table.cell(table_id=gammaTable, column=2,  row=0, text='Distance to Spot', bgcolor=#7122FF, text_size=txtSize, text_color=color.white)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=0,  row=i+1, text=array.get(names,(array.get(names_sorted,i))), bgcolor=#000000, text_size=txtSize, text_color=color.white, text_halign=text.align_left)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=1,  row=i+1, text=str.tostring(array.get(key_values,(array.get(names_sorted,i)))), bgcolor=#000000, text_size=txtSize, text_color=color.white)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=2,  row=i+1, text=str.tostring(math.round((array.get(key_values,(array.get(names_sorted,i)))-close)/close*100,2))+"%",
                 bgcolor=math.round((array.get(key_values,(array.get(names_sorted,i)))-close)/close*100,2) >= 0 ? color.new(color.green,60-100*math.round((array.get(key_values,(array.get(names_sorted,i)))-close)/close*100,2)/max_value):color.new(color.red,60+100*(math.round((array.get(key_values,(array.get(names_sorted,i)))-close)/close*100,2))/max_value), text_size=txtSize, text_color=color.white)


        // Start table cells Vertical view 
        if tableOrientation == 'Horizontal'
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=i+1,  row=0, text='', bgcolor=#000000, text_size=txtSize, text_color=color.white)

            table.cell(table_id=gammaTable, column=0,  row=0, text='Key Level', bgcolor=#7122FF, text_size=txtSize, text_color=color.white,text_halign=text.align_left)
            table.cell(table_id=gammaTable, column=0,  row=1, text='Value', bgcolor=#7122FF, text_size=txtSize, text_color=color.white,text_halign=text.align_left)
            table.cell(table_id=gammaTable, column=0,  row=2, text='Distance to Spot', bgcolor=#7122FF, text_size=txtSize, text_color=color.white,text_halign=text.align_left)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=i+1,  row=0, text=array.get(names,(array.get(names_sorted,i))), bgcolor=#000000, text_size=txtSize, text_color=color.white, text_halign=text.align_left)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=i+1,  row=1, text=str.tostring(array.get(key_values,(array.get(names_sorted,i)))), bgcolor=#000000, text_size=txtSize, text_color=color.white)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=i+1,  row=2, text=str.tostring(math.round((array.get(key_values,(array.get(names_sorted,i)))-close)/close*100,2))+"%", 
                 bgcolor=math.round((array.get(key_values,(array.get(names_sorted,i)))-close)/close*100,2) >= 0 ? color.new(color.green,60-100*math.round((array.get(key_values,(array.get(names_sorted,i)))-close)/close*100,2)/max_value):color.new(color.red,60+100*(math.round((array.get(key_values,(array.get(names_sorted,i)))-close)/close*100,2))/max_value), text_size=txtSize, text_color=color.white)

if table_sorting=="Ascending levels values" 
    if txtSizeInput != "None"
        var table gammaTable = table.new(pos, columns=array.size(Dividedstrings), rows=array.size(Dividedstrings), frame_color=#FFFFFF, frame_width=1, border_width=1, border_color=#FFFFFF)

        // Start table cells Vertical view 
        // symbols
        if tableOrientation == 'Vertical'
            table.cell(table_id=gammaTable, column=0,  row=0, text='Key Level', bgcolor=#7122FF, text_size=txtSize, text_color=color.white,text_halign=text.align_left)
            table.cell(table_id=gammaTable, column=1,  row=0, text='Value', bgcolor=#7122FF, text_size=txtSize, text_color=color.white)
            table.cell(table_id=gammaTable, column=2,  row=0, text='Distance to Spot', bgcolor=#7122FF, text_size=txtSize, text_color=color.white)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=0,  row=i+2, text=array.get(names,(array.get(key_values_sorted,i))), bgcolor=#000000, text_size=txtSize, text_color=color.white, text_halign=text.align_left)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=1,  row=i+2, text=str.tostring(array.get(key_values,(array.get(key_values_sorted,i)))), bgcolor=#000000, text_size=txtSize, text_color=color.white)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=2,  row=i+2, text=str.tostring(math.round((array.get(key_values,(array.get(key_values_sorted,i)))-close)/close*100,2))+"%",
                 bgcolor=math.round((array.get(key_values,(array.get(key_values_sorted,i)))-close)/close*100,2) >= 0 ? color.new(color.green,60-100*math.round((array.get(key_values,(array.get(key_values_sorted,i)))-close)/close*100,2)/max_value):color.new(color.red,60+100*(math.round((array.get(key_values,(array.get(key_values_sorted,i)))-close)/close*100,2))/max_value), text_size=txtSize, text_color=color.white)
        
        // Start table cells Vertical view 
        if tableOrientation == 'Horizontal'
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=i,  row=0, text='', bgcolor=#000000, text_size=txtSize, text_color=color.white)

            table.cell(table_id=gammaTable, column=0,  row=0, text='Key Level', bgcolor=#7122FF, text_size=txtSize, text_color=color.white,text_halign=text.align_left)
            table.cell(table_id=gammaTable, column=0,  row=1, text='Value', bgcolor=#7122FF, text_size=txtSize, text_color=color.white,text_halign=text.align_left)
            table.cell(table_id=gammaTable, column=0,  row=2, text='Distance to Spot', bgcolor=#7122FF, text_size=txtSize, text_color=color.white,text_halign=text.align_left)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=i+1,  row=0, text=array.get(names,(array.get(key_values_sorted,i))), bgcolor=#000000, text_size=txtSize, text_color=color.white, text_halign=text.align_left)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=i+1,  row=1, text=str.tostring(array.get(key_values,(array.get(key_values_sorted,i)))), bgcolor=#000000, text_size=txtSize, text_color=color.white)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=i+1,  row=2, text=str.tostring(math.round((array.get(key_values,(array.get(key_values_sorted,i)))-close)/close*100,2))+"%",
                 bgcolor=math.round((array.get(key_values,(array.get(key_values_sorted,i)))-close)/close*100,2) >= 0 ? color.new(color.green,60-100*math.round((array.get(key_values,(array.get(key_values_sorted,i)))-close)/close*100,2)/max_value):color.new(color.red,60+100*(math.round((array.get(key_values,(array.get(key_values_sorted,i)))-close)/close*100,2))/max_value), text_size=txtSize, text_color=color.white)

if table_sorting=='Descending levels values'
    if txtSizeInput != "None"
        var table gammaTable = table.new(pos, columns=array.size(Dividedstrings), rows=array.size(Dividedstrings), frame_color=#FFFFFF, frame_width=1, border_width=1, border_color=#FFFFFF)

        // Start table cells Vertical view 
        // symbols
        if tableOrientation == 'Vertical'
            table.cell(table_id=gammaTable, column=0,  row=0, text='Key Level', bgcolor=#7122FF, text_size=txtSize, text_color=color.white,text_halign=text.align_left)
            table.cell(table_id=gammaTable, column=1,  row=0, text='Value', bgcolor=#7122FF, text_size=txtSize, text_color=color.white)
            table.cell(table_id=gammaTable, column=2,  row=0, text='Distance to Spot', bgcolor=#7122FF, text_size=txtSize, text_color=color.white)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=0,  row=i+2, text=array.get(names,(array.get(key_values_sorted2,i))), bgcolor=#000000, text_size=txtSize, text_color=color.white, text_halign=text.align_left)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=1,  row=i+2, text=str.tostring(array.get(key_values,(array.get(key_values_sorted2,i)))), bgcolor=#000000, text_size=txtSize, text_color=color.white)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=2,  row=i+2, text=str.tostring(math.round((array.get(key_values,(array.get(key_values_sorted2,i)))-close)/close*100,2))+"%",
                 bgcolor=math.round((array.get(key_values,(array.get(key_values_sorted2,i)))-close)/close*100,2) >= 0 ? color.new(color.green,60-100*math.round((array.get(key_values,(array.get(key_values_sorted2,i)))-close)/close*100,2)/max_value):color.new(color.red,60+100*(math.round((array.get(key_values,(array.get(key_values_sorted2,i)))-close)/close*100,2))/max_value), text_size=txtSize, text_color=color.white)
        
        // Start table cells Vertical view 
        if tableOrientation == 'Horizontal'
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=i,  row=0, text='', bgcolor=#000000, text_size=txtSize, text_color=color.white)

            table.cell(table_id=gammaTable, column=0,  row=0, text='Key Level', bgcolor=#7122FF, text_size=txtSize, text_color=color.white,text_halign=text.align_left)
            table.cell(table_id=gammaTable, column=0,  row=1, text='Value', bgcolor=#7122FF, text_size=txtSize, text_color=color.white,text_halign=text.align_left)
            table.cell(table_id=gammaTable, column=0,  row=2, text='Distance to Spot', bgcolor=#7122FF, text_size=txtSize, text_color=color.white,text_halign=text.align_left)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=i+1,  row=0, text=array.get(names,(array.get(key_values_sorted2,i))), bgcolor=#000000, text_size=txtSize, text_color=color.white, text_halign=text.align_left)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=i+1,  row=1, text=str.tostring(array.get(key_values,(array.get(key_values_sorted2,i)))), bgcolor=#000000, text_size=txtSize, text_color=color.white)
            for i=0 to array.size(names)-1
                table.cell(table_id=gammaTable, column=i+1,  row=2, text=str.tostring(math.round((array.get(key_values,(array.get(key_values_sorted2,i)))-close)/close*100,2))+"%",
                 bgcolor=math.round((array.get(key_values,(array.get(key_values_sorted2,i)))-close)/close*100,2) >= 0 ? color.new(color.green,60-100*math.round((array.get(key_values,(array.get(key_values_sorted2,i)))-close)/close*100,2)/max_value):color.new(color.red,60+100*(math.round((array.get(key_values,(array.get(key_values_sorted2,i)))-close)/close*100,2))/max_value), text_size=txtSize, text_color=color.white)

//if barstate.islast
//    label.new(bar_index,close,text=str.tostring(max_value))

